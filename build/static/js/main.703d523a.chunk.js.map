{"version":3,"sources":["Components/firebase.js","Components/Post.js","Components/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","image","caption","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","setImage","progress","setProgress","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","height","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","React","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","email","setEmail","password","setPassword","setUsername","setUser","onAuthStateChanged","authUser","console","log","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.703d523a.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp ({\r\n    apiKey: \"AIzaSyB03XeY0L2RGbXCmF7S_Ej9DFVQfuh1Hbk\",\r\n    authDomain: \"instagram-clone-2a8aa.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-clone-2a8aa.firebaseio.com\",\r\n    projectId: \"instagram-clone-2a8aa\",\r\n    storageBucket: \"instagram-clone-2a8aa.appspot.com\",\r\n    messagingSenderId: \"173771742377\",\r\n    appId: \"1:173771742377:web:99c07e03b5907204995db8\",\r\n    measurementId: \"G-LYFVG54BDQ\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport {db, auth, storage};","import React, { useState, useEffect } from \"react\";\r\nimport \"../ComponentsCss/Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport firebase from \"firebase\";\r\nimport { db } from \"./firebase\";\r\n\r\nfunction Post({ postId, user, username, image, caption }) {\r\n  const [comments, setComments] = useState([]);\r\n  const [comment, setComment] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (postId) {\r\n      unsubscribe = db\r\n        .collection(\"posts\")\r\n        .doc(postId)\r\n        .collection(\"comments\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n          setComments(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [postId]);\r\n\r\n  const postComment = (event) => {\r\n    event.preventDefault();\r\n\r\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n      text: comment,\r\n      username: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setComment(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post__header\">\r\n        <Avatar className=\"post__avatar\" alt={username} src={image} />\r\n        <h3>{username}</h3>\r\n      </div>\r\n\r\n      {/* header--avatar---username\r\n            image\r\n            username--caption */}\r\n      <img className=\"post__image\" src={image} alt=\"\" />\r\n      <h4 className=\"post__text\">\r\n        <strong>{username} : </strong>\r\n        {caption}\r\n      </h4>\r\n\r\n      <div className=\"post__comments\">\r\n        {comments.map((comment) => (\r\n          <p>\r\n            <strong>{comment.username}</strong>:{comment.text}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      {user && (\r\n        <form className=\"post__commentBox\">\r\n          <input\r\n            className=\"post__input\"\r\n            type=\"text\"\r\n            placeholder=\"Add a comment\"\r\n            value={comment}\r\n            onChange={(e) => setComment(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"post__button\"\r\n            disabled={!comment}\r\n            type=\"submit\"\r\n            onClick={postComment}\r\n          >\r\n            Post\r\n          </button>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { db, storage } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport \"../ComponentsCss/ImageUpload.css\";\r\n\r\nfunction ImageUpload({ username }) {\r\n  const [caption, setCaption] = useState(\"\");\r\n  const [image, setImage] = useState(null);\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    if (image !== null) {\r\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          // progress function here\r\n          const progress = Math.round(\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 1000\r\n          );\r\n          setProgress(progress);\r\n        },\r\n        (error) => {\r\n          //error function to handle if ther is any error\r\n          alert(error.message);\r\n        },\r\n        () => {\r\n          storage\r\n            .ref(\"images\")\r\n            .child(image.name)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              // post the url inside the database\r\n              db.collection(\"posts\").add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                caption: caption,\r\n                image: url,\r\n                username: username,\r\n              });\r\n              setProgress(0);\r\n              setCaption(\"\");\r\n              setImage(null);\r\n            });\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"imageupload\">\r\n      <form className=\"imageupload__form\">\r\n        <progress\r\n          className=\"imageupload__progress\"\r\n          value={progress}\r\n          max=\"100\"\r\n        />\r\n        <div className=\"imageupload__inputs\">\r\n          <input\r\n            className=\"imageupload__caption\"\r\n            type=\"text\"\r\n            placeholder=\"Enter a caption for the upload..\"\r\n            onChange={(event) => setCaption(event.target.value)}\r\n            value={caption}\r\n          />\r\n          <div className=\"s2\">\r\n            <input\r\n              className=\"imageupload__file\"\r\n              type=\"file\"\r\n              onChange={handleChange}\r\n            />\r\n            <Button\r\n              disabled={!caption}\r\n              className=\"imageupload__button\"\r\n              onClick={handleUpload}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Components/Post\";\nimport { db, auth } from \"./Components/firebase\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./Components/ImageUpload\";\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%`,\n  };\n}\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"fixed\",\n    width: 280,\n    height: 350,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[2],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        //user has logged in\n        console.log(authUser);\n        setUser(authUser);\n      } else {\n        //user has logged out\n        setUser(null);\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            post: doc.data(),\n          }))\n        );\n      });\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n    setOpen(false);\n  };\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n    setOpenSignIn(false);\n  };\n\n  return (\n    <div className=\"app\">\n      {/* signup modal */}\n      <div className=\"app__modal\">\n        <Modal open={open} onClose={() => setOpen(false)}>\n          <div style={modalStyle} className={classes.paper}>\n            <form className=\"app__signup\">\n              <center>\n                <img\n                  className=\"app__headerImage\"\n                  src=\"https://www.elkrapidslibrary.org/instagram-logo.jpeg/@@images/00c55615-b96a-4db2-a8de-f5d1a6c29860.jpeg\"\n                  alt=\"\"\n                />\n              </center>\n\n              <Input\n                className=\"app__signupInput\"\n                placeholder=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <Input\n                className=\"app__signupInput\"\n                placeholder=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <Input\n                className=\"app__signupInput\"\n                placeholder=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n\n              <Button type=\"submit\" onClick={signUp}>\n                Sign Up\n              </Button>\n            </form>\n          </div>\n        </Modal>\n\n        {/* signin modal */}\n        <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n          <div style={modalStyle} className={classes.paper}>\n            <form className=\"app__signin\">\n              <center>\n                <img\n                  className=\"app__headerImage\"\n                  src=\"https://www.elkrapidslibrary.org/instagram-logo.jpeg/@@images/00c55615-b96a-4db2-a8de-f5d1a6c29860.jpeg\"\n                  alt=\"\"\n                />\n              </center>\n              <Input\n                className=\"app__signinInput\"\n                placeholder=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <Input\n                className=\"app__signinInput\"\n                placeholder=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n\n              <Button type=\"submit\" onClick={signIn}>\n                Sign In\n              </Button>\n            </form>\n          </div>\n        </Modal>\n      </div>\n\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Instagram_logo.svg/800px-Instagram_logo.svg.png\"\n          alt=\"\"\n        />\n\n        {user ? (\n          <Button className=\"logout\" onClick={() => auth.signOut()}>\n            Logout\n          </Button>\n        ) : (\n          <div className=\"app__loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {posts.map(({ id, post }) => (\n            <Post\n              key={id}\n              postId={id}\n              user={user}\n              username={post.username}\n              caption={post.caption}\n              image={post.image}\n            />\n          ))}\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url=\"https://www.instagram.com/p/CEMMkTWACKW/\"\n            maxWidth={400}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n      <div className=\"imageupload\">\n        {user?.displayName ? (\n          <ImageUpload username={user.displayName} />\n        ) : (\n          <p></p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}